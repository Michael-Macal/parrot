// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ListenerControls component renders 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div>
    <TextField
        disabled={false}
        floatingLabelFixed={false}
        floatingLabelText="Scenario Name"
        fullWidth={false}
        multiLine={false}
        name="Scenario Name"
        onChange={[Function]}
        rows={1}
        type="text"
        underlineShow={true}
        value=""
    />
    <RaisedButton
        disabled={true}
        fullWidth={false}
        label="Start Listening"
        labelPosition="after"
        onTouchTap={[Function]}
        primary={true}
        secondary={false}
    />
</div>,
  "nodes": Array [
    <div>
      <TextField
            disabled={false}
            floatingLabelFixed={false}
            floatingLabelText="Scenario Name"
            fullWidth={false}
            multiLine={false}
            name="Scenario Name"
            onChange={[Function]}
            rows={1}
            type="text"
            underlineShow={true}
            value=""
      />
      <RaisedButton
            disabled={true}
            fullWidth={false}
            label="Start Listening"
            labelPosition="after"
            onTouchTap={[Function]}
            primary={true}
            secondary={false}
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <ListenerControls
        url="http://localhost:8080"
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": ListenerControls {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "url": "http://localhost:8080",
        },
        "refs": Object {},
        "setName": [Function],
        "state": Object {
          "error": false,
          "isListening": false,
          "scenarioName": "",
        },
        "toggleListening": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div>
          <TextField
                    disabled={false}
                    floatingLabelFixed={false}
                    floatingLabelText="Scenario Name"
                    fullWidth={false}
                    multiLine={false}
                    name="Scenario Name"
                    onChange={[Function]}
                    rows={1}
                    type="text"
                    underlineShow={true}
                    value=""
          />
          <RaisedButton
                    disabled={true}
                    fullWidth={false}
                    label="Start Listening"
                    labelPosition="after"
                    onTouchTap={[Function]}
                    primary={true}
                    secondary={false}
          />
</div>,
        "_debugID": 2,
        "_renderedOutput": <div>
          <TextField
                    disabled={false}
                    floatingLabelFixed={false}
                    floatingLabelText="Scenario Name"
                    fullWidth={false}
                    multiLine={false}
                    name="Scenario Name"
                    onChange={[Function]}
                    rows={1}
                    type="text"
                    underlineShow={true}
                    value=""
          />
          <RaisedButton
                    disabled={true}
                    fullWidth={false}
                    label="Start Listening"
                    labelPosition="after"
                    onTouchTap={[Function]}
                    primary={true}
                    secondary={false}
          />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ListenerControls
    url="http://localhost:8080"
/>,
}
`;
